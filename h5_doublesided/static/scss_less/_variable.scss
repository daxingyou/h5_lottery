@charset "utf-8";
// other
@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    border-radius: $radius;
}

//transition
@mixin transition-duration($duration) {
    -webkit-border-radius: $duration;
    -moz-border-radius: $duration;
    -ms-border-radius: $duration;
    border-radius: $duration;
}

//transform
@mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}

//animation
@mixin animation($value) {
    -webkit-animation: $value;
    -moz-animation: $value;
    -ms-animation: $value;
    -o-animation: $value;
    animation: $value;
}

//keyframes
@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content
    }
    @-moz-keyframes #{$name} {
        @content
    }
    @-ms-keyframes #{$name} {
        @content
    }
    @-o-keyframes #{$name} {
        @content
    }
    @keyframes #{$name} {
        @content
    }
}

// rotate
@mixin rotate ($deg) {
    @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
    @include transform(scale($scale));
}

// translate
@mixin translate ($x,
$y) {
    @include transform(translate($x, $y));
}

// skew
@mixin skew ($x,
$y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
}

//compass
@mixin box-shadow($top,
$left,
$blur,
$color) {
    -webkit-box-shadow: $top, $left, $blur, $color;
    -moz-box-shadow: $top, $left, $blur, $color;
    -ms-box-shadow: $top, $left, $blur, $color;
    box-shadow: $top, $left, $blur, $color;
}

@mixin appearance($appearance) {
    // There is no caniuse tracking for appearance.
    $appearance: unquote($appearance);
    @include with-prefix(-moz) {
        -moz-appearance: $appearance;
    }
    @include with-prefix(-webkit) {
        -webkit-appearance: $appearance;
    }
}

@mixin clearfix() {
    &::after {
        display: block;
        clear: both;
        content: "";
    }
}

/* 用法 @include respond-to('尺寸(ex:sm,xs..)')*/
$breakpoints: (
'ss': ( max-width: 359px),
'xs': ( max-width: 480px),
'sm': ( max-width: 576px),
'md': ( max-width: 768px),
'lg': ( max-width: 992px),
'xl': ( max-width: 1200px)) !default;
/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints,
    $breakpoint) {
        // Prints a media query based on the value
        @media #{inspect(map-get($breakpoints, $breakpoint))} {
            @content;
        }
    }
    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "+"Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

// // break points
// //these are the default settings if not specified by the user
// $breakpoints: (
//   "xs": 0px,    //targeting <568px devices (e.g. all iPhones <6)
//   "sm": 568px,  //targeting >=568px devices (e.g. iPhones >=6)
//   "md": 768px,  //targeting >=768px tablets (e.g. portrait iPad)
//   "lg": 1004px  //targeting >=1024px tablets (e.g. landscape iPad) and desktops but leaving room for the scroll bar
// );

